{
	"info": {
		"_postman_id": "74ad8517-ec98-4a1d-8a08-fc1afd86c918",
		"name": "Resolve",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Resolve with assing on sumbody",
			"item": [
				{
					"name": "{{sand}}/userApi/fleets/login - change user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a29772d-3999-460e-a0c4-3e5238ae1fde",
								"exec": [
									"",
									"var responseJson = pm.response.json();",
									"",
									"pm.globals.set(\"token_id\", responseJson.token);",
									"// pm.collectionVariables.set(\"token_id\", responseJson.token);",
									"// pm.environment.set(\"token_id\", responseJson.token);",
									"// console.log(pm.globals.get(\"token_id\"));",
									"",
									"",
									"/*",
									"// получить глобальную переменную",
									"console.log(pm.globals.get(\"token_id\"));",
									"// получить переменную из окружения",
									"console.log(pm.environment.get(\"token_id\"));",
									"// получить переменную из любого пространства согласно приоритету",
									"console.log(pm.variables.get(\"token_id\"));",
									"*/",
									"",
									"",
									"pm.test(\"Response time is less than 2400ms\", function () {",
									"    console.log(\"Response time is \"+pm.response.responseTime);",
									"    pm.expect(pm.response.responseTime).to.be.below(2400);",
									"});",
									"",
									"pm.test(\"Create new user\", function () {",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON and type 'object'\", () => {",
									"    pm.response.to.be.json;",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    pm.expect(responseJson).to.have.any.keys('name');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson.name).to.be.a('string');",
									"    pm.expect(responseJson.email).to.have.lengthOf(24);",
									"    pm.expect(responseJson.type).to.eql('fleet');",
									"    pm.expect(responseJson.email).to.eql(\"sergeyk+000@driveroo.com\"); ",
									"    pm.expect(responseJson.name).to.eql('Chuck Norris');",
									"    pm.expect(responseJson.email).not.eq(undefined); //To Check if Value is Null",
									"});",
									"",
									"pm.test(\"To check if Value eql in the response \", () => {",
									"    pm.expect(responseJson.type).to.eql('fleet');",
									"    pm.expect(responseJson.email).to.eql(\"sergeyk+000@driveroo.com\"); ",
									"    pm.expect(responseJson.name).to.eql('Chuck Norris');",
									"    pm.expect(responseJson.email).not.eq(undefined); //To Check if Value is Null",
									"});",
									"pm.test(\"Check the type of properties\", () => {",
									"    pm.expect(responseJson.name).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"sergeyk+000@driveroo.com\",\n    \"password\": \"123456\",\n    \"device_token\": \"73e879b8-eac0-46df-aa32-16bddadcebff\",\n    \"device_type\": \"web\",\n    \"login_by\": \"manual\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/login",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/cars - Create car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9c89561-416b-49b4-95f1-cd85d06f3bb4",
								"exec": [
									"let responseJson = pm.response.json();",
									"console.log(responseJson.data.id)",
									"pm.collectionVariables.set(\"car_id_resolve\", responseJson.data.id);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.id).to.be.a(\"number\");",
									"    pm.expect(responseJson.data.car_model_id).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34070012-0929-444f-8576-a0923856725e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\":\"\",\n    \"make\":\"\",\n    \"model\":\"\",\n    \"trim\":\"R 6.8 AT (457 Hp) (SUV)\",\n    \"id\":\"\",\n    \"car_status_id\":1,\n    \"pictureLoaded\":\"\",\n    \"car_type_id\":45,\n    \"vin\":\"JTEHT05J022021218\",\n    \"engine\":\"\",\n    \"chassis\":\"\",\n    \"notes\":\"\",\n    \"hours\":\"\",\n    \"seriaNubmer\":\"\",\n    \"purchase_at\":\"2020-01-01\",\n    \"nickname\":\"Car #2\",\n    \"group\":\"\",\n    \"mileage\":200001,\n    \"extra_notes\":\"\",\n    \"groups\":[240],\n    \"picture\":\"\",\n    \"license_plate\": \"SV27149\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/cars",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/inspect  - Schedule an inspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a459bc8-d389-4fee-acbf-156765ac95fe",
								"exec": [
									"let responseJson = pm.response.json();",
									" console.log(responseJson.request_id);",
									"pm.collectionVariables.set(\"request_id_fleet\", responseJson.request_id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.type).to.be.a(\"string\");",
									"    pm.expect(responseJson.request_id).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "car",
									"value": "{{car_id_resolve}}",
									"type": "text"
								},
								{
									"key": "latitude",
									"value": "46.4539332",
									"type": "text"
								},
								{
									"key": "longitude",
									"value": "30.7433664",
									"type": "text"
								},
								{
									"key": "service_type",
									"value": "108",
									"type": "text"
								},
								{
									"key": "to_garage",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{sand}}/userApi/inspect",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"inspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/inspect/start - Start inspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c00ec4ab-d9a8-4b06-b15e-3d6cd6f90a04",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.type).to.be.a(\"string\");",
									"    pm.expect(responseJson.request_id).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "aatg_mode",
									"value": "1",
									"type": "text"
								},
								{
									"key": "answers[default_1]",
									"value": "SV27149",
									"type": "text"
								},
								{
									"key": "car_model_id",
									"value": "38955",
									"type": "text"
								},
								{
									"key": "country",
									"value": "UA",
									"type": "text"
								},
								{
									"key": "hours",
									"value": "20000.2",
									"type": "text"
								},
								{
									"key": "mileage",
									"value": "200002",
									"type": "text"
								},
								{
									"key": "previous_answers",
									"value": "1",
									"type": "text"
								},
								{
									"key": "request_id",
									"value": "{{request_id_fleet}}",
									"type": "text"
								},
								{
									"key": "transmission",
									"value": "2",
									"type": "text"
								},
								{
									"key": "vin",
									"value": "JTEHT05J022021218",
									"type": "text"
								},
								{
									"key": "xlatitude",
									"value": "46.4539332",
									"type": "text"
								},
								{
									"key": "xlongitude",
									"value": "30.7433664",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{sand}}/userApi/inspect/start",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"inspect",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/inspect/issues - Finish inspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7162d9a-7590-4af9-9245-19a0005ed681",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.success).to.be.equal(true);",
									"    pm.expect(responseJson.request_id).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "answers[0YpkMsir][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[0YpkMsir][value]",
									"value": "No",
									"type": "text"
								},
								{
									"key": "answers[0dVA6Sp1][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[0dVA6Sp1][value]",
									"value": "No issues observed",
									"type": "text"
								},
								{
									"key": "answers[2ilasOnl][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[2ilasOnl][picture]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[2ilasOnl][value]",
									"value": "110/22 R19.5",
									"type": "text"
								},
								{
									"key": "answers[66cSeaXt][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[66cSeaXt][picture]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[66cSeaXt][value]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[6m2VYrZs][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[6m2VYrZs][picture]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[6m2VYrZs][value]",
									"value": "(11_) ___-__-__",
									"type": "text"
								},
								{
									"key": "answers[7FGQTsN1][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[7FGQTsN1][value]",
									"value": "0mm-3mm",
									"type": "text"
								},
								{
									"key": "answers[7V8kQ9Bn][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[7V8kQ9Bn][value]",
									"value": "Interior is not Clean",
									"type": "text"
								},
								{
									"key": "answers[E5bMQLr6][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[E5bMQLr6][value]",
									"value": "8mm +",
									"type": "text"
								},
								{
									"key": "answers[KnAlFVzo][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[KnAlFVzo][value]",
									"value": "No issues found at this time",
									"type": "text"
								},
								{
									"key": "answers[M6GhgGoU][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[M6GhgGoU][value]",
									"value": "N/A",
									"type": "text"
								},
								{
									"key": "answers[MNAeKNtQ][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[MNAeKNtQ][picture]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[MNAeKNtQ][value]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[QUz2aJYF][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[QUz2aJYF][picture]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[QUz2aJYF][value]",
									"value": "n/r text answer",
									"type": "text"
								},
								{
									"key": "answers[Th5xy035][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[Th5xy035][value]",
									"value": "Requires repair or replacement",
									"type": "text"
								},
								{
									"key": "answers[TstGDQYY][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[TstGDQYY][value]",
									"value": "232324",
									"type": "text"
								},
								{
									"key": "answers[VvmHho8E][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[VvmHho8E][value]",
									"value": "No issues found at this time",
									"type": "text"
								},
								{
									"key": "answers[W68HyCia][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[W68HyCia][value]",
									"value": "No",
									"type": "text"
								},
								{
									"key": "answers[YSIbppAm][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[YSIbppAm][value]",
									"value": "Positive value",
									"type": "text"
								},
								{
									"key": "answers[Yseb9jgW][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[Yseb9jgW][value]",
									"value": "Checked and OK",
									"type": "text"
								},
								{
									"key": "answers[dXLgMXBs][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[dXLgMXBs][value]",
									"value": "Yes",
									"type": "text"
								},
								{
									"key": "answers[nQn0MPhk][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[nQn0MPhk][value]",
									"value": "Checked and OK",
									"type": "text"
								},
								{
									"key": "answers[pqOqU2az][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[pqOqU2az][value]",
									"value": "Curb rash / scratches",
									"type": "text"
								},
								{
									"key": "answers[qFn0SLnb][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[qFn0SLnb][picture]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[qFn0SLnb][value]",
									"value": "default value",
									"type": "text"
								},
								{
									"key": "answers[qZcOEL5t][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[qZcOEL5t][value]",
									"value": "user option 1",
									"type": "text"
								},
								{
									"key": "answers[qhmCmO50][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[qhmCmO50][value]",
									"value": "No issues observed",
									"type": "text"
								},
								{
									"key": "answers[tAsQwjrh][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[tAsQwjrh][value]",
									"value": "Exterior is Clean",
									"type": "text"
								},
								{
									"key": "answers[wg1UmRlZ][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[wg1UmRlZ][value]",
									"value": "No issues found at this time",
									"type": "text"
								},
								{
									"key": "answers[wwIp6LVh][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[wwIp6LVh][picture]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[wwIp6LVh][value]",
									"value": "11",
									"type": "text"
								},
								{
									"key": "is_issues",
									"value": "0",
									"type": "text"
								},
								{
									"key": "request_id",
									"value": "{{request_id_fleet}}",
									"type": "text"
								},
								{
									"key": "uuid",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{sand}}/userApi/inspect/issues",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"inspect",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/cars/{{car_id_resolve}}/issues - Select list of issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be7d16c5-5229-4e7b-8cb7-a7639076bca4",
								"exec": [
									"let responseJson = pm.response.json().data;",
									" console.log(responseJson)",
									" console.log(responseJson[0].finding_id)",
									" console.log(responseJson[1].finding_id)",
									" console.log(responseJson[2].finding_id)",
									" console.log(responseJson[3].finding_id)",
									" pm.collectionVariables.set(\"issues_id[0]\", responseJson[0].finding_id);",
									"//  pm.collectionVariables.set(\"issues_id[1]\", responseJson[1].finding_id);",
									"//  pm.collectionVariables.set(\"issues_id[2]\", responseJson[3].finding_id);",
									"",
									"console.log(responseJson[4].question)",
									"",
									"for (let i = 0; i < responseJson.length; i++){",
									"    if(responseJson[i].question==\"Front Driver Tire Condition\"){",
									"        console.log(responseJson[i].question)",
									"        console.log(\"issues_id[1] - \"+responseJson[i].finding_id)",
									"        pm.collectionVariables.set(\"issues_id[1]\", responseJson[i].finding_id);",
									"    }",
									"    if(responseJson[i].question==\"Front Driver Tire Pressure Check\"){",
									"        console.log(responseJson[i].question)",
									"        console.log(\"issues_id[2] - \"+responseJson[i].finding_id)",
									"        pm.collectionVariables.set(\"issues_id[2]\", responseJson[i].finding_id);",
									"    }",
									"    if(responseJson[i].question==\"Front Driver Tire Size\"){",
									"        console.log(responseJson[i].question)",
									"        console.log(\"issues_id[3] - \"+responseJson[i].finding_id)",
									"        pm.collectionVariables.set(\"issues_id[3]\", responseJson[i].finding_id);",
									"    }",
									"    if(responseJson[i].question==\"Front Driver Brake Rotors\"){",
									"        console.log(responseJson[i].question)",
									"        console.log(\"issues_id[4] - \"+responseJson[i].finding_id)",
									"        pm.collectionVariables.set(\"issues_id[4]\", responseJson[i].finding_id);",
									"    }",
									"}",
									"",
									"// let arr = [];",
									"// for (let i = 0; i < responseJson.length; i++){",
									"//     arr[i]=(responseJson[i].finding_id);",
									"// }",
									"// console.log(arr)",
									"//  pm.collectionVariables.set(\"issues_id\", arr);",
									"// console.log(pm.collectionVariables.get(\"issues_id\")[5]);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson[0].finding_id).to.be.a('number');",
									"    pm.expect(responseJson[0].question).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "31113296-958a-4527-8fef-f48dfc23b1d1",
								"exec": [
									"console.log(pm.globals.get(\"token_id\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/userApi/fleets/cars/{{car_id_resolve}}/issues",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"cars",
								"{{car_id_resolve}}",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{issues_id}}/assign - Assing WO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebbd7eed-7d38-4841-9856-aede4d5b6e87",
								"exec": [
									"let responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"work_order_id\", responseJson.data.work_order.uuid);",
									"console.log(pm.collectionVariables.get(\"work_order_id\"))",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.finding_id).to.be.a('number');",
									"    pm.expect(responseJson.data.question).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e21ef7-ba85-4440-8c01-1e3f9b2caf7c",
								"exec": [
									"var moment = require('moment');",
									"",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(-2, 'day').format(\"YYYY-MM-DD\"));",
									"console.log(pm.globals.get(\"todeyDate\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "cookie",
								"value": "laravel_session=jTFsLTE4eK05Jlpg9dZmwwcfHkZ4OdQvpC6JAPeT",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"assign_name\":\"Freddie  Mercury\",\"assign_email\":\"sergeyk+003@driveroo.com\",\"assign_phone\":\"+19546338219\",\"overdue_to\":\"{{todeyDate}}\",\"user_id\":2858}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/findings/{{issues_id[1]}}/assign",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{issues_id[1]}}",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{work_order_id}}/resolve - WO resolve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a49caa37-db75-4429-90ca-85ac4c550eb9",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.company.currency.currency).to.be.a('string');",
									"    pm.expect(responseJson.company.name).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Check content JSON responce\", function () {",
									"    pm.expect(responseJson.success).to.be.equal(true);",
									"    pm.expect(responseJson.company.name).to.be.equal(\"Driveroo_Test_Env\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "notes",
									"value": "",
									"type": "text"
								},
								{
									"key": "mileage",
									"value": "200002",
									"type": "text"
								},
								{
									"key": "cost_info",
									"value": "",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/findings/{{work_order_id}}/resolve",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{work_order_id}}",
								"resolve"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{issues_id[4]}} - aditional info about issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "379b101d-8f6d-4d7d-b394-3183bfccbb85",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.finding_id).to.be.a('number');",
									"    pm.expect(responseJson.data.question).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/userApi/fleets/findings/{{issues_id[4]}}",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{issues_id[4]}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{sand}}/userApi/fleets/login - change user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f96f299-ca09-4b97-931d-bceee41b0cf7",
								"exec": [
									"",
									"var responseJson = pm.response.json();",
									"",
									"pm.globals.set(\"token_id\", responseJson.token);",
									"// pm.collectionVariables.set(\"token_id\", responseJson.token);",
									"// pm.environment.set(\"token_id\", responseJson.token);",
									"// console.log(pm.globals.get(\"token_id\"));",
									"",
									"",
									"/*",
									"// получить глобальную переменную",
									"console.log(pm.globals.get(\"token_id\"));",
									"// получить переменную из окружения",
									"console.log(pm.environment.get(\"token_id\"));",
									"// получить переменную из любого пространства согласно приоритету",
									"console.log(pm.variables.get(\"token_id\"));",
									"*/",
									"",
									"",
									"pm.test(\"Response time is less than 2400ms\", function () {",
									"    console.log(\"Response time is \"+pm.response.responseTime);",
									"    pm.expect(pm.response.responseTime).to.be.below(2400);",
									"});",
									"",
									"pm.test(\"Create new user\", function () {",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON and type 'object'\", () => {",
									"    pm.response.to.be.json;",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    pm.expect(responseJson).to.have.any.keys('name');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson.name).to.be.a('string');",
									"    pm.expect(responseJson.email).to.have.lengthOf(24);",
									"    pm.expect(responseJson.type).to.eql('fleet');",
									"    pm.expect(responseJson.email).to.eql(\"sergeyk+003@driveroo.com\"); ",
									"    pm.expect(responseJson.name).to.eql('Freddie  Mercury');",
									"    pm.expect(responseJson.email).not.eq(undefined); //To Check if Value is Null",
									"});",
									"",
									"pm.test(\"To check if Value eql in the response \", () => {",
									"    pm.expect(responseJson.type).to.eql('fleet');",
									"    pm.expect(responseJson.email).to.eql(\"sergeyk+003@driveroo.com\"); ",
									"    pm.expect(responseJson.name).to.eql('Freddie  Mercury');",
									"    pm.expect(responseJson.email).not.eq(undefined); //To Check if Value is Null",
									"});",
									"pm.test(\"Check the type of properties\", () => {",
									"    pm.expect(responseJson.name).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"sergeyk+003@driveroo.com\",\n    \"password\": \"123456\",\n    \"device_token\": \"73e879b8-eac0-46df-aa32-16bddadcebff\",\n    \"device_type\": \"web\",\n    \"login_by\": \"manual\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/login",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{issues_id[4]}} - aditional info about issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f7ff697-ec3f-4364-972a-8c79b7178625",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.finding_id).to.be.a('number');",
									"    pm.expect(responseJson.data.question).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/userApi/fleets/findings/{{issues_id[4]}}",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{issues_id[4]}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{issues_id}}/assign - Assing WO Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "470f5a55-11a1-4ff2-9877-c209458b4f37",
								"exec": [
									"let responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"work_order_id\", responseJson.data.work_order.uuid);",
									"console.log(pm.collectionVariables.get(\"work_order_id\"))",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.finding_id).to.be.a('number');",
									"    pm.expect(responseJson.data.question).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "58e6ffe2-eff0-483b-8262-7d4dfc3bca5f",
								"exec": [
									"var moment = require('moment');",
									"",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(-2, 'day').format(\"YYYY-MM-DD\"));",
									"console.log(pm.globals.get(\"todeyDate\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "cookie",
								"value": "laravel_session=jTFsLTE4eK05Jlpg9dZmwwcfHkZ4OdQvpC6JAPeT",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"assign_name\":\"Freddie  Mercury\",\"assign_email\":\"sergeyk+003@driveroo.com\",\"assign_phone\":\"+19546338219\",\"overdue_to\":\"{{todeyDate}}\",\"user_id\":2858}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/findings/{{issues_id[4]}}/assign",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{issues_id[4]}}",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{work_order_id}}/resolve - WO resolve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a5e02c8-624c-41a2-aceb-623cadc82551",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.company.currency.currency).to.be.a('string');",
									"    pm.expect(responseJson.company.name).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Check content JSON responce\", function () {",
									"    pm.expect(responseJson.success).to.be.equal(true);",
									"    pm.expect(responseJson.company.name).to.be.equal(\"Driveroo_Test_Env\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "notes",
									"value": "",
									"type": "text"
								},
								{
									"key": "mileage",
									"value": "200002",
									"type": "text"
								},
								{
									"key": "cost_info",
									"value": "",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/findings/{{work_order_id}}/resolve",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{work_order_id}}",
								"resolve"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{sand}}/userApi/fleets/login - change user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8247c08-cfd0-485e-a060-fc89c696712b",
								"exec": [
									"",
									"var responseJson = pm.response.json();",
									"",
									"pm.globals.set(\"token_id\", responseJson.token);",
									"// pm.collectionVariables.set(\"token_id\", responseJson.token);",
									"// pm.environment.set(\"token_id\", responseJson.token);",
									"// console.log(pm.globals.get(\"token_id\"));",
									"",
									"",
									"/*",
									"// получить глобальную переменную",
									"console.log(pm.globals.get(\"token_id\"));",
									"// получить переменную из окружения",
									"console.log(pm.environment.get(\"token_id\"));",
									"// получить переменную из любого пространства согласно приоритету",
									"console.log(pm.variables.get(\"token_id\"));",
									"*/",
									"",
									"",
									"pm.test(\"Response time is less than 2400ms\", function () {",
									"    console.log(\"Response time is \"+pm.response.responseTime);",
									"    pm.expect(pm.response.responseTime).to.be.below(2400);",
									"});",
									"",
									"pm.test(\"Create new user\", function () {",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON and type 'object'\", () => {",
									"    pm.response.to.be.json;",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    pm.expect(responseJson).to.have.any.keys('name');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson.name).to.be.a('string');",
									"    pm.expect(responseJson.email).to.have.lengthOf(24);",
									"    pm.expect(responseJson.type).to.eql('fleet');",
									"    pm.expect(responseJson.email).to.eql(\"sergeyk+000@driveroo.com\"); ",
									"    pm.expect(responseJson.name).to.eql('Chuck Norris');",
									"    pm.expect(responseJson.email).not.eq(undefined); //To Check if Value is Null",
									"});",
									"",
									"pm.test(\"To check if Value eql in the response \", () => {",
									"    pm.expect(responseJson.type).to.eql('fleet');",
									"    pm.expect(responseJson.email).to.eql(\"sergeyk+000@driveroo.com\"); ",
									"    pm.expect(responseJson.name).to.eql('Chuck Norris');",
									"    pm.expect(responseJson.email).not.eq(undefined); //To Check if Value is Null",
									"});",
									"pm.test(\"Check the type of properties\", () => {",
									"    pm.expect(responseJson.name).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"sergeyk+000@driveroo.com\",\n    \"password\": \"123456\",\n    \"device_token\": \"73e879b8-eac0-46df-aa32-16bddadcebff\",\n    \"device_type\": \"web\",\n    \"login_by\": \"manual\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/login",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{issues_id[0]}}/resolve - Resolve without assing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adb5e488-b242-4b8c-8ad6-3c9a2747a970",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.finding_id).to.be.a('number');",
									"    pm.expect(responseJson.data.question).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.reporter.name).to.be.equal(\"Chuck Norris\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "notes",
									"value": " ",
									"type": "text"
								},
								{
									"key": "mileage",
									"value": " 200002",
									"type": "text"
								},
								{
									"key": "cost_info",
									"value": " ",
									"type": "text"
								},
								{
									"key": "amount",
									"value": " ",
									"type": "text"
								},
								{
									"key": "resolve_date",
									"value": " 11/26/2020 1:51 AM",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{sand}}/userApi/fleets/findings/{{issues_id[0]}}/resolve",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{issues_id[0]}}",
								"resolve"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/cars/16489/remove -Delete car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f209cc3b-51e2-41e3-a9e9-661ed27ce5d2",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check responce\", function () {",
									"    pm.expect(responseJson.success).to.be.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/userApi/cars/{{car_id_resolve}}/remove",
							"host": [
								"{{sand}}"
							],
							"path": [
								"userApi",
								"cars",
								"{{car_id_resolve}}",
								"remove"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Prod - Resolve",
			"item": [
				{
					"name": "/userApi/fleets/login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a771e77-2380-4a21-ba3c-423eff2caeb0",
								"exec": [
									"//console.log(pm.variables.get(\"token_id_prod\")+\"  -- 1+1\");",
									"",
									"// получить глобальную переменную",
									" pm.globals.get(\"token_id_prod\");",
									"//console.log(\"получить глобальную переменную\");",
									"//console.log(pm.globals.get(\"token_id_prod\"));",
									"",
									"// получить переменную из окружения",
									" pm.environment.get(\"token_id_prod\");",
									"//console.log (\"получить переменную из окружения\");",
									"//console.log(pm.environment.get(\"token_id_prod\"));",
									"",
									"// получить переменную из любого пространства согласно приоритету",
									" pm.variables.get(\"token_id_prod\");",
									"// console.log(\"из любого пространства согласно приоритету\")",
									"// console.log(pm.variables.get(\"token_id_prod\"));",
									"",
									"console.log(pm.globals.get(\"token_id_prod\"));",
									"",
									"",
									"/* ****** ",
									"",
									"// получить переменную из любого пространства согласно приоритету",
									"console.log(pm.variables.get(\"token_id_prod\"));",
									"// получить переменную из окружения",
									"console.log(pm.environment.get(\"token_id_prod\"));",
									"// получить глобальную переменную",
									"console.log(pm.globals.get(\"token_id_prod\"));",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55bf516b-7641-43d9-bc49-852a0e1220b9",
								"exec": [
									"",
									"var responseJson = pm.response.json();",
									"",
									"pm.globals.set(\"token_id_prod\", responseJson.token);",
									"pm.collectionVariables.set(\"token_id_prod\", responseJson.token);",
									"pm.environment.set(\"token_id_prod\", responseJson.token);",
									"console.log(pm.globals.get(\"token_id_prod\"));",
									"",
									"",
									"/*",
									"// получить глобальную переменную",
									"console.log(pm.globals.get(\"token_id_prod\"));",
									"// получить переменную из окружения",
									"console.log(pm.environment.get(\"token_id_prod\"));",
									"// получить переменную из любого пространства согласно приоритету",
									"console.log(pm.variables.get(\"token_id_prod\"));",
									"*/",
									"",
									"",
									"pm.test(\"Response time is less than 2400ms\", function () {",
									"    console.log(\"Response time is \"+pm.response.responseTime);",
									"    pm.expect(pm.response.responseTime).to.be.below(2400);",
									"});",
									"",
									"pm.test(\"Create new user\", function () {",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is JSON and type 'object'\", () => {",
									"    pm.response.to.be.json;",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    pm.expect(responseJson).to.have.any.keys('name');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson.name).to.be.a('string');",
									"    pm.expect(responseJson.email).to.have.lengthOf(24);",
									"    pm.expect(responseJson.type).to.eql('fleet');",
									"    pm.expect(responseJson.email).to.eql(\"zhukova.nadiia@gmail.com\"); ",
									"    pm.expect(responseJson.name).to.eql('Nadezhda Moha');",
									"    pm.expect(responseJson.email).not.eq(undefined); //To Check if Value is Null",
									"});",
									"",
									"pm.test(\"To check if Value eql in the response \", () => {",
									"    pm.expect(responseJson.type).to.eql('fleet');",
									"    pm.expect(responseJson.email).to.eql(\"zhukova.nadiia@gmail.com\"); ",
									"    pm.expect(responseJson.name).to.eql('Nadezhda Moha');",
									"    pm.expect(responseJson.email).not.eq(undefined); //To Check if Value is Null",
									"});",
									"pm.test(\"Check the type of properties\", () => {",
									"    pm.expect(responseJson.name).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"zhukova.nadiia@gmail.com\",\n    \"password\": \"123456\",\n    \"device_token\": \"73e879b8-eac0-46df-aa32-16bddadcebff\",\n    \"device_type\": \"web\",\n    \"login_by\": \"manual\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prod}}/userApi/fleets/login",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"fleets",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/cars - Create car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "247c90ec-5aa9-4189-b5fe-d34d22c20a20",
								"exec": [
									"let responseJson = pm.response.json();",
									"console.log(responseJson.data.id)",
									"pm.collectionVariables.set(\"car_id_resolve\", responseJson.data.id);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.id).to.be.a(\"number\");",
									"    pm.expect(responseJson.data.car_model_id).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4ef3254d-01ee-4b86-beb0-1f53b755c07f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mileage\": \"200001\",\n  \"hours\": \"\",\n  \"purchase_at\": \"2020-01-01\",\n  \"nickname\": \"Car #2\",\n  \"license_plate\": \"SV27149\",\n  \"car_type_id\": 40,\n  \"car_status_id\": 1,\n  \"vin\": \"JTEHT05J022021218\",\n  \"chassis\": \"\",\n  \"engine\": \"\",\n  \"sn\": \"\",\n  \"year\": 0,\n  \"make\": \"\",\n  \"model\": \"\",\n  \"trim\": \"R 6.8 AT (457 Hp) (SUV)\",\n  \"notes\": \"string\",\n  \"extra_notes\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prod}}/userApi/fleets/cars",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"fleets",
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/inspect  - Schedule an inspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc755623-c55a-45de-9240-d8c688aede99",
								"exec": [
									"let responseJson = pm.response.json();",
									" console.log(responseJson.request_id);",
									"pm.collectionVariables.set(\"request_id_fleet\", responseJson.request_id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.type).to.be.a(\"string\");",
									"    pm.expect(responseJson.request_id).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "car",
									"value": "{{car_id_resolve}}",
									"type": "text"
								},
								{
									"key": "latitude",
									"value": "46.4539332",
									"type": "text"
								},
								{
									"key": "longitude",
									"value": "30.7433664",
									"type": "text"
								},
								{
									"key": "service_type",
									"value": "124",
									"type": "text"
								},
								{
									"key": "to_garage",
									"value": "1",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{prod}}/userApi/inspect",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"inspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/inspect/start - Start inspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e52d2e1-bdf4-47da-95cb-37aef47266b3",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.type).to.be.a(\"string\");",
									"    pm.expect(responseJson.request_id).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "answers[default_5]",
									"value": "SV27149",
									"type": "text"
								},
								{
									"key": "aatg_mode",
									"value": "1",
									"type": "text"
								},
								{
									"key": "hours",
									"value": "0",
									"type": "text"
								},
								{
									"key": "previous_answers",
									"value": "1",
									"type": "text"
								},
								{
									"key": "mileage",
									"value": "200002",
									"type": "text"
								},
								{
									"key": "request_id",
									"value": "{{request_id_fleet}}",
									"type": "text"
								},
								{
									"key": "transmission",
									"value": "2",
									"type": "text"
								},
								{
									"key": "vin",
									"value": "JTEHT05J022021218",
									"type": "text"
								},
								{
									"key": "country",
									"value": "",
									"type": "text"
								},
								{
									"key": "xlatitude",
									"value": "0.0",
									"type": "text"
								},
								{
									"key": "xlongitude",
									"value": "0.0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{prod}}/userApi/inspect/start",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"inspect",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/inspect/issues - Finish inspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8929c62a-49cc-42fb-9ba6-c4d15ceee771",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.success).to.be.equal(true);",
									"    pm.expect(responseJson.request_id).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "answers[M0lFZgsT][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[M0lFZgsT][value]",
									"value": "user option 1",
									"type": "text"
								},
								{
									"key": "answers[267myS9n][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[267myS9n][value]",
									"value": "No issues found at this time",
									"type": "text"
								},
								{
									"key": "answers[pf1xwDM5][value]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[1FIiHsfd][comment]",
									"value": "Text1",
									"type": "text"
								},
								{
									"key": "answers[1FIiHsfd][value]",
									"value": "Exterior is not Clean",
									"type": "text"
								},
								{
									"key": "answers[8YzYNTL8][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[8YzYNTL8][value]",
									"value": "No issues found at this time",
									"type": "text"
								},
								{
									"key": "answers[ZZM93Xs2][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[ZZM93Xs2][value]",
									"value": "No issues found at this time",
									"type": "text"
								},
								{
									"key": "answers[UPEd3UMH][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[UPEd3UMH][value]",
									"value": "Yes",
									"type": "text"
								},
								{
									"key": "answers[1HkCuOZq][value]",
									"value": "0mm-3mm",
									"type": "text"
								},
								{
									"key": "answers[KHy9yhAq][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[KHy9yhAq][value]",
									"value": "8mm +",
									"type": "text"
								},
								{
									"key": "answers[eyFBn3GS][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[eyFBn3GS][value]",
									"value": "Inspected",
									"type": "text"
								},
								{
									"key": "answers[TstGDQYY][value]",
									"value": "336447",
									"type": "text"
								},
								{
									"key": "answers[6m2VYrZs][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[6m2VYrZs][value]",
									"value": "(11*) ***-**-**",
									"type": "text"
								},
								{
									"key": "answers[qhmCmO50][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[qhmCmO50][value]",
									"value": "No issues observed",
									"type": "text"
								},
								{
									"key": "answers[UCwjNdow][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[UCwjNdow][value]",
									"value": "Positive value",
									"type": "text"
								},
								{
									"key": "answers[Yseb9jgW][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[Yseb9jgW][value]",
									"value": "Checked and OK",
									"type": "text"
								},
								{
									"key": "answers[QUz2aJYF][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[QUz2aJYF][value]",
									"value": "May the n/r t be with xt*",
									"type": "text"
								},
								{
									"key": "answers[LhlyrXAa][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[LhlyrXAa][value]",
									"value": "110/22 R19.5",
									"type": "text"
								},
								{
									"key": "answers[nQn0MPhk][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[nQn0MPhk][value]",
									"value": "Checked and OK",
									"type": "text"
								},
								{
									"key": "answers[PPnRfUXx][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[PPnRfUXx][value]",
									"value": "default value",
									"type": "text"
								},
								{
									"key": "answers[LzCKLmQK][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[LzCKLmQK][value]",
									"value": "N/A",
									"type": "text"
								},
								{
									"key": "answers[fgiIqsT9][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[fgiIqsT9][value]",
									"value": "No",
									"type": "text"
								},
								{
									"key": "answers[wthfZb04][value]",
									"value": "No issues found at this time",
									"type": "text"
								},
								{
									"key": "answers[pbZ4Pwfo][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[pbZ4Pwfo][value]",
									"value": "No issues found at this time",
									"type": "text"
								},
								{
									"key": "answers[73AxQHqd][comment]",
									"value": "",
									"type": "text"
								},
								{
									"key": "answers[73AxQHqd][value]",
									"value": "Interior is Clean",
									"type": "text"
								},
								{
									"key": "is_issues",
									"value": "0",
									"type": "text"
								},
								{
									"key": "request_id",
									"value": "{{request_id_fleet}}",
									"type": "text"
								},
								{
									"key": "xlatitude",
									"value": "0.0",
									"type": "text"
								},
								{
									"key": "xlongitude",
									"value": "0.0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{prod}}/userApi/inspect/issues",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"inspect",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/cars/{{car_id_resolve}}/issues - Select list of issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21d8575b-73f5-44d9-aea6-a0d007558e16",
								"exec": [
									"let responseJson = pm.response.json().data;",
									" console.log(responseJson)",
									" console.log(responseJson[0].finding_id)",
									" console.log(responseJson[1].finding_id)",
									" console.log(responseJson[2].finding_id)",
									" console.log(responseJson[3].finding_id)",
									" pm.collectionVariables.set(\"issues_id[0]\", responseJson[0].finding_id);",
									" pm.collectionVariables.set(\"issues_id[1]\", responseJson[1].finding_id);",
									" pm.collectionVariables.set(\"issues_id[2]\", responseJson[3].finding_id);",
									"",
									"console.log(responseJson[3].question)",
									"",
									"for (let i = 0; i < responseJson.length; i++){",
									"    if(responseJson[i].question==\"Front Driver Tire Condition\"){",
									"        console.log(responseJson[i].finding_id)",
									"        pm.collectionVariables.set(\"issues_id[2]\", responseJson[i].finding_id);",
									"    }",
									"}",
									"",
									"// let arr = [];",
									"// for (let i = 0; i < responseJson.length; i++){",
									"//     arr[i]=(responseJson[i].finding_id);",
									"// }",
									"// console.log(arr)",
									"//  pm.collectionVariables.set(\"issues_id\", arr);",
									"// console.log(pm.collectionVariables.get(\"issues_id\")[5]);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson[0].finding_id).to.be.a('number');",
									"    pm.expect(responseJson[0].question).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/userApi/fleets/cars/{{car_id_resolve}}/issues",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"fleets",
								"cars",
								"{{car_id_resolve}}",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{issues_id}}/assign - Assing WO",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d404584-2c3f-4886-a264-66a14f1a9eb2",
								"exec": [
									"let responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"work_order_id\", responseJson.data.work_order.uuid);",
									"console.log(pm.collectionVariables.get(\"work_order_id\"))",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.finding_id).to.be.a('number');",
									"    pm.expect(responseJson.data.question).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d9a54843-da6d-4f59-b310-a07908317bbc",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(-1, 'day').format(\"YYYY-MM-DD\"));",
									"// console.log(pm.globals.get(\"todeyDate\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "cookie",
								"value": "laravel_session=jTFsLTE4eK05Jlpg9dZmwwcfHkZ4OdQvpC6JAPeT",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"assign_name\":\"Nadezhda111 LName222\",\"assign_email\":\"nadezhda+12@driveroo.com\",\"assign_phone\":\"+15625122939\",\"overdue_to\":\"{{todeyDate}}\",\"user_id\":3173,\"assigned_user_id\":\"\",\"isExitUser\":\"company\",\"approve_amount\":\"\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prod}}/userApi/fleets/findings/{{issues_id[2]}}/assign",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{issues_id[2]}}",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{work_order_id}}/resolve - WO resolve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbe70584-4c31-4871-8b86-500b13623f05",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.company.currency.currency).to.be.a('string');",
									"    pm.expect(responseJson.company.name).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Check content JSON responce\", function () {",
									"    pm.expect(responseJson.success).to.be.equal(true);",
									"    // pm.expect(responseJson.company.name).to.be.equal(\"Driveroo_Test_Env\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "notes",
									"value": "",
									"type": "text"
								},
								{
									"key": "mileage",
									"value": "200002",
									"type": "text"
								},
								{
									"key": "cost_info",
									"value": "",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{prod}}/userApi/fleets/findings/{{work_order_id}}/resolve",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{work_order_id}}",
								"resolve"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/fleets/findings/{{issues_id[0]}}/resolve - Resolve without assing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e72d933-a5d6-42a2-939e-69231f6a3eba",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.finding_id).to.be.a('number');",
									"    pm.expect(responseJson.data.question).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Check shema JSON responce\", function () {",
									"    pm.expect(responseJson.data.reporter.name).to.be.equal(\"Chuck Norris\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "notes",
									"value": " ",
									"type": "text"
								},
								{
									"key": "mileage",
									"value": " 200002",
									"type": "text"
								},
								{
									"key": "cost_info",
									"value": " ",
									"type": "text"
								},
								{
									"key": "amount",
									"value": " ",
									"type": "text"
								},
								{
									"key": "resolve_date",
									"value": " 11/26/2020 1:51 AM",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{prod}}/userApi/fleets/findings/{{issues_id[1]}}/resolve",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"fleets",
								"findings",
								"{{issues_id[1]}}",
								"resolve"
							]
						}
					},
					"response": []
				},
				{
					"name": "/userApi/cars/16489/remove -Delete car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42a514a3-4fa1-41e4-a2e9-560f42a746c8",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check responce\", function () {",
									"    pm.expect(responseJson.success).to.be.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_id_prod}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/userApi/cars/{{car_id_resolve}}/remove",
							"host": [
								"{{prod}}"
							],
							"path": [
								"userApi",
								"cars",
								"{{car_id_resolve}}",
								"remove"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c5962703-54dd-4ece-a1bc-fea13a8b8e27",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "86b7c151-9d5b-47e4-9f4f-aad976151824",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b8dc23b8-bf5e-4c06-9c59-e396e616d3c1",
			"key": "sand",
			"value": "https://sandbox.driveroo.com"
		},
		{
			"id": "ef8f1a16-7253-4072-a29c-49872d79c26c",
			"key": "prod",
			"value": "https://lp.driveroo.com/driveroo"
		},
		{
			"id": "485a66a5-a372-4672-bddf-7976383e527f",
			"key": "car_id_resolve",
			"value": ""
		},
		{
			"id": "4522f333-d0ff-49dc-af81-e727c2a64702",
			"key": "request_id_fleet",
			"value": ""
		},
		{
			"id": "a769c6a8-cb0b-4f80-a302-20476c82623b",
			"key": "issues_id",
			"value": ""
		},
		{
			"id": "82b0f1f1-ddac-4870-8449-fb6ec782304a",
			"key": "work_order_id",
			"value": ""
		},
		{
			"id": "7beca96a-f94d-4802-81b9-f2335aa532a8",
			"key": "issues_id[0]",
			"value": ""
		},
		{
			"id": "2c170ac6-3726-4c28-9e67-8c3655766e9f",
			"key": "issues_id[1]",
			"value": ""
		},
		{
			"id": "314e0b27-089a-4f69-9894-7a340f7ae42e",
			"key": "issues_id[2]",
			"value": ""
		},
		{
			"id": "75fa6d59-4cd4-431f-b52f-69c2ab98a25a",
			"key": "token_id_prod",
			"value": ""
		},
		{
			"id": "1b9987cd-b6fe-43d1-9a7b-40eabc2b0d3a",
			"key": "issues_id[3]",
			"value": ""
		},
		{
			"id": "2acda4d8-9ba2-4b67-8249-02bfe93b45c6",
			"key": "issues_id[4]",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}